# Generated by CodiumAI
from decimal import Decimal
from unittest.mock import Mock

from django.test import TestCase
from model_bakery import baker

from apps.cart.cart import Cart
from apps.shop.models import Product
from config import settings


class TestCart(TestCase):
    def test_cart_initialization_with_empty_request(self):
        request = Mock()
        request.session = {"modified": False}

        # Create a cart object
        cart = Cart(request)

        # Assert that the cart is empty
        assert len(cart) == 0
        assert cart.get_total_price() == Decimal(0)

    def test_add_product_to_cart(self):
        request = Mock()
        request.session = {"modified": False}

        # Create a product object
        product = baker.make(Product, price=Decimal(10))

        # Create a cart object
        cart = Cart(request)

        # Add the product to the cart
        cart.add(product, quantity=2)

        # Assert product is added to cart with correct quantity and price
        assert len(cart) == 2
        assert cart.get_total_price() == Decimal(20)

    def test_remove_product_from_cart(self):
        request = Mock()
        request.session = {"modified": False}

        # Create a product object
        product = baker.make(Product, price=Decimal(10))

        # Create a cart object
        cart = Cart(request)

        # Add the product to the cart
        cart.add(product, quantity=2)

        # Remove the product from the cart
        cart.remove(product)

        # Assert that the product is removed from the cart
        assert len(cart) == 0
        assert cart.get_total_price() == Decimal(0)

    def test_clear_cart(self):
        request = Mock()
        request.session = {"modified": False}

        # Create a product object
        product = baker.make(Product, price=Decimal(10))

        # Create a cart object
        cart = Cart(request)

        # Add the product to the cart
        cart.add(product, quantity=2)

        # Clear the cart
        cart.clear()

        # Assert that the cart is cleared
        assert len(cart) == 0
        assert cart.get_total_price() == Decimal(0)

    def test_calculate_total_price(self):
        import pdb; pdb.set_trace()
        request = Mock()

        # Create product objects
        product1 = baker.make(Product, price=Decimal(10))
        product2 = baker.make(Product, price=Decimal(15))

        # Create a cart object
        cart = Cart(request)

        # Add the products to the cart
        cart.add(product1, quantity=2)
        cart.add(product2, quantity=3)

        # Assert that the total price is calculated correctly
        assert cart.get_total_price() == Decimal(10 * 2 + 15 * 3)

    def test_cart_iteration(self):
        request = Mock()
        request.session = {"modified": False}

        # Create product objects
        product1 = baker.make(Product, price=Decimal(10))
        product2 = baker.make(Product, price=Decimal(15))

        # Create a cart object
        cart = Cart(request)

        # Add the products to the cart
        cart.add(product1, quantity=2)
        cart.add(product2, quantity=3)

        # Iterate over the cart and assert the product information
        for item in cart:
            assert item["product"] in [product1, product2]
            assert item["price"] == item["product"].price
            assert (
                item["total_price"] == item["product"].price * item["quantity"]
            )

    def test_add_product_with_nonexistent_id(self):
        request = Mock()
        request.session = {"modified": False}

        # Create a mock product object with a non-existent ID
        product = baker.make(
            Product, id="non-existent uuid", price=Decimal(10))

        # Create a cart object
        cart = Cart(request)

        # Add the product to the cart
        cart.add(product)

        # Assert that the product is added to the cart
        assert len(cart) == 1
        assert cart.get_total_price() == Decimal(10.00)
        assert str(product.id) in cart.cart
        assert cart.cart[str(product.id)]["quantity"] == 1
        assert cart.cart[str(product.id)]["price"] == "10.00"

    def test_cart_price_change_does_not_affect_items(self):
        request = Mock()
        request.session = {
            settings.CART_SESSION_ID: {
                "UU!D": {"quantity": 2, "price": "10.00"}
            },
            "modified": False
        }

        # Create a mock product with a different price
        product = baker.make(Product, id="UU!D", price=Decimal("15.00"))

        # Create a cart object
        cart = Cart(request)

        # Add the product to the cart
        cart.add(product)

        # Assert the item price in the cart is still the original price
        assert cart.cart["UU!D"]["price"] == "10.00"

        # Assert the total price is still calculated using the original price
        assert cart.get_total_price() == Decimal("20.00")
