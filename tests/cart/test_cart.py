# Generated by CodiumAI
from decimal import Decimal

from django.test import Client, TestCase
from model_bakery import baker

from apps.cart.cart import Cart
from apps.shop.models import Product


class CartTestCase(TestCase):

    def setUp(self):
        self.client = Client()
        self.response = self.client.get("/")
        self.request = self.response.wsgi_request

    def test_cart_initialization_with_empty_request(self):
        cart = Cart(self.request)

        # Assert that the cart is empty
        assert len(cart) == 0
        assert cart.get_total_price() == Decimal(0)

    def test_add_product_to_cart(self):
        product = baker.make(Product, price=Decimal(10))

        cart = Cart(self.request)

        # Add the product to the cart
        cart.add(product, quantity=2)

        # Assert product is added to cart with correct quantity and price
        assert len(cart) == 2
        assert cart.get_total_price() == Decimal(20)

    def test_remove_product_from_cart(self):
        product = baker.make(Product, price=Decimal(10))

        cart = Cart(self.request)

        # Add the product to the cart
        cart.add(product, quantity=2)

        # Remove the product from the cart
        cart.remove(product)

        # Assert that the product is removed from the cart
        assert len(cart) == 0
        assert cart.get_total_price() == Decimal(0)

    def test_clear_cart(self):
        product = baker.make(Product, price=Decimal(10))

        cart = Cart(self.request)

        # Add the product to the cart
        cart.add(product, quantity=2)

        # Clear the cart
        cart.clear()

        # Assert that the cart is cleared
        assert len(cart) == 0
        assert cart.get_total_price() == Decimal(0)

    def test_calculate_total_price(self):
        product1 = baker.make(Product, price=Decimal(10))
        product2 = baker.make(Product, price=Decimal(15))

        cart = Cart(self.request)

        # Add the products to the cart
        cart.add(product1, quantity=2)
        cart.add(product2, quantity=3)

        # Assert that the total price is calculated correctly
        assert cart.get_total_price() == Decimal(10 * 2 + 15 * 3)

    def test_cart_iteration(self):
        product1 = baker.make(Product, price=Decimal(10))
        product2 = baker.make(Product, price=Decimal(15))

        cart = Cart(self.request)

        # Add the products to the cart
        cart.add(product1, quantity=2)
        cart.add(product2, quantity=3)

        # Iterate over the cart and assert the product information
        for item in cart:
            assert item["product"] in [product1, product2]
            assert item["price"] == item["product"].price
            assert (
                item["total_price"] == item["product"].price * item["quantity"]
            )

    def test_cart_price_change_does_not_affect_items(self):
        product = baker.make(
            Product, id="097d4168-4374-11ee-be56-0242ac120002",
            price=Decimal("15.00"))

        cart = Cart(self.request)
        cart.add(product)

        product.price = Decimal("20.00")
        product.save()

        assert cart.cart["097d4168-4374-11ee-be56-0242ac120002"]["price"] == "15.00"    # noqa
        assert cart.get_total_price() == Decimal("15.00")
        assert product.price == Decimal("20.00")
